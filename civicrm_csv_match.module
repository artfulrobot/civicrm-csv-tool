<?php

/**
 * @file
 * Try to find contacts matching data in csv file through interactive process and output a csv file which can then be used for importing contributions etc.
 *
 */


/**
  * Implements hook_menu()
  */
function civicrm_csv_match_menu()
{
	$items['civicrm/csvmatch'] = array(
    'page callback' => 'civicrm_csv_match_dash',
    //'page arguments' => array(1,'thanks',0),
    'access arguments' =>  array('view all contacts'),
    'type' => MENU_CALLBACK,
  );
	$items['civicrm/csvmatch/create'] = array(
    'page callback' => 'civicrm_csv_match_create',
    'access arguments' =>  array('view all contacts'),
    'type' => MENU_CALLBACK,
  );
	$items['civicrm/csvmatch/dash'] = array(
    'title' => 'Clean',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' =>  array('view all contacts'),
    'weight' => 2,
  );
	$items['civicrm/csvmatch/assign/ajax'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'civicrm_csv_match_assign',
    'page arguments' => array('ajax'),
    'access arguments' =>  array('view all contacts'),
  );
	$items['civicrm/csvmatch/assign'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'civicrm_csv_match_assign',
    'access arguments' =>  array('view all contacts'),
  );
	$items['civicrm/csvmatch/upload'] = array(
    'title' => 'Upload CSV file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civicrm_csv_match_upload_form'),
    'access arguments' =>  array('view all contacts'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
	$items['civicrm/csvmatch/download'] = array(
    'title' => 'Download Cleaned CSV file',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civicrm_csv_match_download_form'),
    'access arguments' =>  array('view all contacts'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
	$items['civicrm/csvmatch/drop'] = array(
    'title' => 'CSV tool: reset',
    'page callback' => 'civicrm_csv_match_drop',
    'access arguments' =>  array('view all contacts'),
    'type' => MENU_CALLBACK,
  );
	return $items;
}

// custom pages
/**
 * List the work to do, if any.
 */
function civicrm_csv_match_create() {
  require_once 'sites/default/civicrm.settings.php';
  require_once 'CRM/Core/Config.php';
  require_once 'api/api.php';
  CRM_Core_Config::singleton( );
  // If there is no table, we're done.
  if (!db_query('SELECT id FROM {civicrm_csv_match_cache} WHERE state=\'impossible\' OR (state=\'chosen\' AND contact_id=0) LIMIT 1')->rowCount()) {
    drupal_set_message("There is no data that needs new contacts creating.");
    drupal_goto('civicrm/csvmatch/dash');
  }

  // There is a table. Show the contents that's outstanding.
  $rows = db_query("SELECT * FROM {civicrm_csv_match_cache} todo
    WHERE ( state = 'impossible' ) OR ( state = 'chosen' AND contact_id = 0 )");

  // Loop the rows and create the contacts
  // Look out for duplicate entries, this is a possibility
  $duplicates = array();
  $count = 0;
  while ($row = $rows->fetchAssoc()) {
    $row = (array) $row;
    $hash = md5($row['fname'] . $row['lname'] . $row['email']);
    if (isset($duplicates[$hash])) {
      // update row
      db_update('civicrm_csv_match_cache')
        ->fields(array(
          'state' => 'found',
          'contact_id' => $duplicates[$hash]['contact_id'],
          'resolution' => $duplicates[$hash]['resolution'],
        ))
        ->condition('id', $row['id'])
        ->execute();
      continue;
    }

    // @todo title - would require looking up individual prefix YUK.
    $params = array(
      'sequential' => 1,
      'contact_type' => "Individual",
      'first_name' => $row['fname'],
      'last_name' => $row['lname'],
    );
    if ($row['email']) {
      $params['email'] = $row['email'];
    }
    $result = civicrm_api3('Contact', 'create', $params);
    if ($result['is_error']) {
      drupal_set_message("Error creating contact $row[fname] $row[lname]", 'error');
      continue;
    }
    $count++;
    $contact = $result['values'][0];
    // Remember this so we don't create duplicates.
    $duplicates[$hash] = array(
      'contact_id' => $contact['id'],
      'resolution' => serialize($contact['display_name']),
    );

    // update row
    db_update('civicrm_csv_match_cache')
      ->fields(array(
        'state' => 'found',
        'contact_id' => $contact['id'],
        'resolution' => serialize($contact['display_name']),
      ))
      ->condition('id', $row['id'])
      ->execute();
  }
  drupal_set_message( $count . " contacts created");
  drupal_goto('civicrm/csvmatch/dash');
}

/**
 * List the work to do, if any.
 */
function civicrm_csv_match_dash() {

  // If there is no table, we're done.
  if (!db_query('SELECT id FROM {civicrm_csv_match_cache} LIMIT 1')->rowCount()) {
    drupal_set_message("There is no data waiting to be matched. Care to upload a new CSV file?");
    drupal_goto('civicrm/csvmatch/upload');
  }

  // There is a table. Show the contents that's outstanding.
  $rows = db_query("
    SELECT *, COUNT(id) set_count FROM {civicrm_csv_match_cache} todo
    WHERE state != 'header'
    GROUP BY fname, lname, email");

  $html = "<table><thead>
     <tr><th>Name and email</th><th>Resolution</th></tr>
     </thead><tbody>";
  $counts = array('impossible' => 0, 'multiple' => 0,'chosen'=>0,'found'=>0);
  while($row = $rows->fetchAssoc()) {
    switch($row['state']) {
    case 'chosen':
      if ($row['contact_id']) {
        $counts['chosen']++;
      } else {
        $counts['impossible']++;
      }
      break;
    default:
      $counts[$row['state']]++;
    }

    $html .= "<tr class='$row[state]'><td valign='top'>" .
      ($row['set_count']>1 ? $row['set_count'] . " rows from: " : '') .
      htmlspecialchars($row['fname']) . " " .
      htmlspecialchars($row['lname']) . "<br/>" .
      (strlen($row['email'])>40
       ? "<span title='" .htmlspecialchars($row['email']) . "' >" . htmlspecialchars(substr($row['email'], 0, 30)) . '&hellip;</span>'
       : htmlspecialchars($row['email']))
      . "</td><td>" ;

    $html .= CiviCRMCSVMatch::resolutionHtml($row);
    $html .= '</td></tr>';
  }
  $html .= "</tbody></table>";

  $html = CiviCRMCSVMatch::getSummary($counts) . $html;

  return array('#markup' => $html,
    '#attached' => array(
      'js'  => array( drupal_get_path('module','civicrm_csv_match') . '/csv_match.js'),
      'css' => array( drupal_get_path('module','civicrm_csv_match') . '/csv_match.css'),
      ));
}

/**
 * Assign contact
 */
function civicrm_csv_match_assign($ajax='') {
  require_once 'sites/default/civicrm.settings.php';
  require_once 'CRM/Core/Config.php';
  require_once 'api/api.php';
  CRM_Core_Config::singleton( );

  $record_id = (int) $_GET['rec'];
  $contact_id = (int) $_GET['cid'];
  $mark_impossible = !empty($_GET['new']);

  if (!($record_id>0)) {
    if ($ajax) {
      return 'Odd call. Try reloading the page.';
    }
    drupal_set_message("Odd call. Ignored it.");
    drupal_goto('civicrm/csvmatch');
  }

  // load the record
  $record = CiviCRMCSVMatch::loadCacheRecord($record_id);
  if (!$record) {
    if ($ajax) {
      return 'Odd call. Try reloading the page.';
    }
    drupal_set_message("Odd call 2. Ignored it.");
    drupal_goto('civicrm/csvmatch');
  }

  // If called with a contact_id, we want to assign that, otherwise we're doing a reset on this row.
  if ($contact_id > 0) {
    // Assign: check contact_id exists.
    $params = array( 'version' => 3, 'sequential' => 1, 'contact_id' => $contact_id);
    $result = civicrm_api('Contact', 'get', $params);
    if ($result['count']!=1) {
      if ($ajax) {
        return 'Odd call. Try reloading the page.';
      }
      drupal_set_message("Odd call 3. Ignored it.");
      drupal_goto('civicrm/csvmatch');
    }

    $record['state'] = 'chosen';
    $record['contact_id'] = $contact_id;
    $record['resolution'] = serialize($result['values'][0]['display_name']);
    CiviCRMCSVMatch::updateCacheRecords($record);

    if ($ajax) {
      $response['className'] = $record['state'];
      $response['item'] = CiviCRMCSVMatch::resolutionHtml($record);
      $response['summary'] = CiviCRMCSVMatch::getSummary();
      print json_encode($response);
      exit;
    }
  }
  else {
    // de-assign/reset or set deliberately impossible

    /*
    $line = array(
      'contact_id' => 0,
      'title' => $line[0],
      'fname' => $line[1],
      'lname' => $line[2],
      'email' => $line[3],
      'data' => serialize($line),
    );
*/
    if (!$mark_impossible) {
      CiviCRMCSVMatch::findContact($record);
    }
    else {
      // user is saying this is a new person
      $record['contact_id'] = 0;
      $record['state'] = 'chosen';
      $record['resolution'] = '';
    }
    // OK, update it.
    $record['resolution'] = serialize($record['resolution']);
    CiviCRMCSVMatch::updateCacheRecords($record);

    if ($ajax) {
      $response['item'] = CiviCRMCSVMatch::resolutionHtml($record);
      $response['className'] = $record['state'];
      $response['summary'] = CiviCRMCSVMatch::getSummary();
      print json_encode($response);
      exit;
    }
  }

  drupal_goto('civicrm/csvmatch', array(
    'query' => array(
      'updated_id' => $record_id)));
}

/**
 * List the work to do, if any.
 */
function civicrm_csv_match_upload_form() {

  // ----------------------------------------------------------------------------------------
  if (FALSE) {
  require_once 'sites/default/civicrm.settings.php';
  require_once 'CRM/Core/Config.php';
  require_once 'api/api.php';
  $config = CRM_Core_Config::singleton( );

  $cids = array(3);
  //$result= CRM_Contact_BAO_GroupContact::addContactsToGroup($cids, 43);
  $result= CRM_Contact_BAO_GroupContact::removeContactsFromGroup($cids, 43);
  return array('#markup'=>"<pre>" . htmlspecialchars(print_r($result,1))."</pre>");
  }
  // ----------------------------------------------------------------------------------------




  // Warn if data exists.
  if (db_query('SELECT id FROM {civicrm_csv_match_cache} LIMIT 1')->rowCount()) {
    $form[] = array(
      '#markup' => "<div class='messages warning'>There's existing data. If you upload a file this will be lost. You can <a href='/civicrm/csvmatch/download' >download the data</a> now.</div>");
  }

  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['csvfile'] = array(
    '#prefix' => '<p>This tool takes a .csv file and tries to clean names and find the right people (with your help),
      and then outputs a new version with details added, including a CiviCRM contact ID as the first column.</p>
      <p>The first four column MUST be as follows</p>
      <ol>
      <li>Title</li>
      <li>First name</li>
      <li>Last name</li>
      <li>Email</li>
      </ol>
      <p>It is fine (normal) for one or more of these to be blank.</p>
      <p>If only the first name column is used, this name is considered for unpacking into different columns:</p>
      <ul><li>Mr. Fred Flintstone</li>
      <li>Fred Flintstone</li>
      <li>Flintstone, Fred</li>
      </ul>
      <p>The resulting .csv file is then more useful as data for the various import tools.</p>',
    '#type' => 'file',
    '#title' => t('Choose a file'),
    '#title_display' => 'invisible',
  );

  $form['clean_only'] = array(
    '#type' => 'checkbox',
    '#default value' => 0,
    '#title' => 'Skip ID Lookup (useful if you just want to clean names)',
  );
  $form['upload'] = array(
    '#type' => 'submit',
    '#value' => t('Upload and process'),
  );

  return $form;
}

/**
 * Process the uploaded file.
 */
function civicrm_csv_match_upload_form_submit($form, &$form_state) {
  require_once 'sites/default/civicrm.settings.php';
  require_once 'CRM/Core/Config.php';
  require_once 'api/api.php';
  $config = CRM_Core_Config::singleton( );

  // can take a while...
  set_time_limit(0);

  // If there is data in the table, empty it.
  db_truncate('civicrm_csv_match_cache')->execute();

  // check the file uploaded.
  $filename = $_FILES['files']['tmp_name']['csvfile'];
  $filetype = $_FILES['files']['type']['csvfile'];
  // Turns out CSV may be classified in a number of ways
  if (!preg_match('@^(text|application)/((x-)?((csv|comma-separated-values))|vnd.ms-excel)$@',$filetype)) {
    drupal_set_message("Uploaded file not recognised as csv");
    return $form;
  }

  // first we need to ensure the file to UTF8 because fgetcsv assumes this.
  $file = file_get_contents($filename);
  $enc = mb_detect_encoding($file, 'ISO-5591-1, cp1252, UTF-8', TRUE);
  if ($enc !== 'UTF-8') {
    // default to latin1 if unable to detect
    $enc = $enc ? $enc : 'ISO-8859-1';
    $file = mb_convert_encoding($file, 'UTF-8', $enc);
    file_put_contents($filename, $file);
  }
  unset($file);

  // open the file and import the data.
  $fh = fopen($filename,'r');
  $header=1;
  $clean_only = $form_state['values']['clean_only'];
  while ($line = fgetcsv($fh)){
    $line = array(
      'contact_id' => 0,
      'title' => trim($line[0]),
      'fname' => trim($line[1]),
      'lname' => trim($line[2]),
      'email' => trim($line[3]),
      'data' => serialize($line),
    );

    if ($header) {
      $line['state'] = 'header';
      $header = 0;
    }
    else {
      if (!$line['lname'] && !$line['title'] && $line['fname']) {
        CiviCRMCSVMatch::cleanName($line);
      }
      if ($clean_only) {
        $line['resolution'] = '(clean only mode)';
        $line['resolution'] = serialize($line['resolution']);
        $line['state'] = 'clean-only';
      }
      else {
        CiviCRMCSVMatch::findContact($line);
        $line['resolution'] = serialize($line['resolution']);
      }
    }

    $id = db_insert('civicrm_csv_match_cache')
      ->fields($line)
      ->execute();
  }
  fclose($fh);
  unlink($filename);

  $form_state['redirect'] = 'civicrm/csvmatch/dash';
}

/**
 * List the work to do, if any.
 */
function civicrm_csv_match_download_form() {

  return array(
    'download' => array(
      '#type' => 'submit',
      '#value' => 'Download .csv file',
    ),
    'delete' => array(
      '#type' => 'submit',
      '#value' => 'Delete data',
    )
  );
}
function civicrm_csv_match_download_form_submit($form, &$form_state) {

  if ($form_state['triggering_element']['#value'] == 'Download .csv file') {
    // If there is no table, we're done.
    if (!db_query('SELECT id FROM {civicrm_csv_match_cache} LIMIT 1')->rowCount()) {
      drupal_set_message("There is no data. Care to upload a new CSV file?");
      drupal_goto('civicrm/csvmatch/upload');
    }

    // There is a table. Show the contents that's outstanding.
    $rows = db_select("civicrm_csv_match_cache", "todo")
      ->fields('todo') // all fields
      ->orderBy('id') // maintain original order
      ->execute();

    // output CSV

    // Add the headers needed to let the browser know this is a csv file download.
    drupal_add_http_header('Content-Type', 'text/csv; utf-8');
    drupal_add_http_header('Content-Disposition', 'attachment; filename = data.csv');

    // prepend contact ID and new name fields - just so we're not overwriting the old data.
    print '"Internal ID","Title", "First Name", "Last Name"';
    $header = $rows->fetchAssoc();
    // unpack original header line
    $data = unserialize($header['data']);
    $data[0] = "Orig: $data[0]";
    $data[1] = "Orig: $data[1]";
    $data[2] = "Orig: $data[2]";
    foreach ($data as $_) {
      print "," . CiviCRMCSVMatch::csvSafe($_);
    }
    print "\n";

    while ( $row = $rows->fetchAssoc()) {
      $data = unserialize($row['data']);
      // prepend contact ID and name fields
      print ($row['contact_id'] ? $row['contact_id'] : '""');
      print "," . CiviCRMCSVMatch::csvSafe($row['title']);
      print "," . CiviCRMCSVMatch::csvSafe($row['fname']);
      print "," . CiviCRMCSVMatch::csvSafe($row['lname']);
      foreach ($data as $_) {
        print "," . CiviCRMCSVMatch::csvSafe($_);
      }
      print "\n";
    }
    exit;
  }
  if ($form_state['triggering_element']['#value'] == 'Delete data') {
    db_truncate('civicrm_csv_match_cache')->execute();
    drupal_set_message('Data deleted');
    $form_state['redirect'] = 'civicrm/csvmatch/upload';
  }
}


class CiviCRMCSVMatch
{
  protected static $titles_regexp;
  public static function findContact(&$record) {
    // if found, set contact ID, set resolution to serialized "update Foo bar".
    // if not found, store possible matches in array of possibilities keyed by contact_id
    //  containing keys
    //  - 'match' why this was a candidate (e.g. email match)
    //  - 'name' just the name

    // email is most unique. if we have that, start there.
    if ($record['email']) {
      // got email look it up in the email table
      $result = civicrm_api3('Email', 'get', array( 'sequential' => 1, 'email' =>$record['email']));
      if ($result['count']>0) {
        // We need to join the contact name details onto our email matches array.
        $contact_ids = array();
        foreach ($result['values'] as $_) {
          $contact_ids[] = (int) $_['contact_id'];
        }
        // Get unique contacts, keyed by contact_id
        $contacts = civicrm_api3('Contact', 'get', array('id' => array('IN' => $contact_ids), 'sequential' => 0));
        foreach ($result['values'] as &$_) {
          $contact = $contacts['values'][$_['contact_id']];
          $_['first_name'] = $contact['first_name'];
          $_['display_name'] = $contact['display_name'];
          unset($_);
        }
      }
      if ($result['count']==1) {
        // winner
        $record['contact_id'] = $result['values'][0]['contact_id'];
        $record['resolution'] = $result['values'][0]['display_name'];
        $record['state'] = 'found';
        return;
      }
      if ($result['count']>1) {
        // quick scan to see if there's only one that matches first name
        $m=array();
        foreach ($result['values'] as $i=>$contact) {
          if ($contact['first_name'] && $record['fname'] && $contact['first_name'] == $record['fname']) {
            $m[] = $i;
          }
        }
        if (count($m) == 1) {
          $i = reset($m);
          // got it!
          $record['contact_id'] = $result['values'][$i]['contact_id'];
          $record['resolution'] = $result['values'][$i]['display_name'];
          $record['state'] = 'found';
          return;
        }

        // could be any of these contacts
        $record['resolution'] = array();
        foreach ($result['values'] as $contact) {
          $record['resolution'][$contact['contact_id']] = array(
            'match' => 'Same email',
            'name'  => $contact['display_name'],
          );
        }
        $record['state'] = 'multiple';
        $record['contact_id'] = 0;
        return;
      }
    }
    // email did not match, or we did not have an email address.

    if ($record['fname'] && $record['lname']) {
      // see if we can find them by name.
      $params = array( 'version' => 3, 'sequential' => 1, 'first_name' => $record['fname'], 'last_name' => $record['lname']);
      $result = civicrm_api('Contact', 'get', $params);
      if ($result['count']==1) {
        // winner
        $record['contact_id'] = $result['values'][0]['contact_id'];
        $record['resolution'] = $result['values'][0]['display_name'];
        $record['state'] = 'found';
        return;
      }
      if ($result['count']>1) {
        // could be any of these contacts
        $record['resolution'] = array();
        foreach ($result['values'] as $contact) {
          $record['resolution'][$contact['contact_id']] = array(
            'match' => 'Same name',
            'name'  => $contact['display_name'],
          );
        }
        $record['state'] = 'multiple';
        $record['contact_id'] = 0;
        return;
      }

      // Still not found? OK, probably something weird with the first name.
      // Let's try last name, with first name as a substring match
      // see if we can find them by name.
      $params = array( 'version' => 3, 'sequential' => 1,
        'first_name' => '%' . $record['fname'] . '%',
        'last_name' => $record['lname']);
      $result = civicrm_api('Contact', 'get', $params);
      if ($result['count']==1) {
        // winner
        $record['contact_id'] = $result['values'][0]['contact_id'];
        $record['resolution'] = $result['values'][0]['display_name'];
        $record['state'] = 'found';
        return;
      }
      if ($result['count']>1) {
        // could be any of these contacts
        $record['resolution'] = array();
        foreach ($result['values'] as $contact) {
          $record['resolution'][$contact['contact_id']] = array(
            'match' => 'Similar name',
            'name'  => $contact['display_name'],
          );
        }
        $record['state'] = 'multiple';
        $record['contact_id'] = 0;
        return;
      }

      // Still not found, let's try first initial.
      $params = array( 'version' => 3, 'sequential' => 1,
        'first_name' => substr($record['fname'],0,1) . '%',
        'last_name' => $record['lname']);
      $result = civicrm_api('Contact', 'get', $params);
      if ($result['count']>0) {
        // Can't assume from the initial, even if just one person.
        // could be any of these contacts
        $record['resolution'] = array();
        foreach ($result['values'] as $contact) {
          $record['resolution'][$contact['contact_id']] = array(
            'match' => 'Same last name, initial',
            'name'  => $contact['display_name'],
          );
        }
        $record['state'] = 'multiple';
        $record['contact_id'] = 0;
        return;
      }
    }

    // OK, maybe the last name is particularly unique?
    if ($record['lname']) {
      $params = array( 'version' => 3, 'sequential' => 1, 'last_name' => $record['lname']);
      $result = civicrm_api('Contact', 'get', $params);
      if ($result['count']>10) {
        $record['resolution'] = "(there are more than 10 people with this last name)";
        $record['state'] = 'multiple';
        $record['contact_id'] = 0;
      }
      elseif ($result['count']>0) {
        // could be any of these contacts
        $record['resolution'] = array();
        foreach ($result['values'] as $contact) {
          $record['resolution'][$contact['contact_id']] = array(
            'match' => 'Same last name',
            'name'  => $contact['display_name'],
          );
        }
        $record['state'] = 'multiple';
        $record['contact_id'] = 0;
        return;
      }
    }

    // if we're here, we only have one name, so let's not bother.
    $record['state'] = 'impossible';
    $record['contact_id'] = 0;
    $record['resolution'] = 'Impossible - no matches for this one.';
  }
  public static function cleanName(&$record) {
    $names = trim($record['fname']);
    $titles = static::getTitleRegex();

    if (preg_match('/^([^,]+)\s*,\s*([^,]+)$/', $names, $matches)) {
      // got name in form: Last, First.
      $record['lname'] = $matches[1];
      $record['fname'] = trim($matches[2]);
      if (preg_match("/^($titles)\s+(.+)$/", $record['fname'], $matches)) {
        $record['title'] = $matches[1];
        $record['fname'] = $matches[2];
      }
    }
    else {
      $names = preg_split('/\s+/', $names);
      if (count($names)>1) {
        // prefix?
        if (preg_match("/^$titles$/", $names[0])) {
          $record['title'] = array_shift($names);
        }
        // Let's assume the first word is the first name
        $record['fname'] = array_shift($names);
        $record['lname'] = implode(' ', $names);
      }
    }

    // if all lowercase or all uppercase, then tidy the case.
    foreach (array('fname','lname','title') as $_) {
      $name = $record[$_];
      if (strtolower($name) == $name || strtoupper($name) == $name) {
        $record[$_] = ucfirst($name);
      }
    }
  }
  public static function getTitleRegex() {
    if (empty(static::$titles_regexp)) {
      require_once 'sites/default/civicrm.settings.php';
      require_once 'CRM/Core/Config.php';
      require_once 'api/api.php';
      $config = CRM_Core_Config::singleton( );

      // @todo load the ones in use.
      static::$titles_regexp = '(?:Ms|Miss|Mrs|Mr|Dr|Prof|Rev|Cllr|Rt Hon).?';
    }
    return static::$titles_regexp;
  }
    public static function csvSafe($string) {
      return '"' . str_replace('"','""',$string) . '"';
    }
  /**
   * Generates the HTML for a particular matched row
   */
  static function resolutionHtml($row) {
    if ($row['resolution']) {
      $res = unserialize($row['resolution']);
      if (is_string($res)) {
        if ($row['contact_id']) {
          if ($row['state'] == 'found') {
            return "Found: <a href='/civicrm/contact/view?reset=1&cid=$row[contact_id]' target='_blank' >$res</a>";
          }
          else {
            // manually chosen, allow reset.
            if ($row['contact_id']>0) {
              $html = "Chosen: <a href='/civicrm/contact/view?reset=1&cid=$row[contact_id]' target='_blank' >$res</a>";
            }
            else {
              $html = "New contact";
            }
            $html .= " | <a href='/civicrm/csvmatch/assign?rec=$row[id]&cid=0' class='choose-link' data-cid='0' >Reset</a> ";
            return $html;
          }
        }
        else {
          // No contact Id
          if ($row['state'] == 'chosen') {
              return "New contact | <a href='/civicrm/csvmatch/assign?rec=$row[id]&cid=0' class='choose-link' data-cid='0' >Reset</a> ";
          }
          else {
            return $res;
          }
        }
      }
      elseif (is_array($res)) {
        // multiple
        $html = "Could be: <ul>";
        foreach ($res as $cid=>$r) {
          $html .= "<li>"
            .htmlspecialchars($r['name'] . " ($r[match])")
            ." <a href='/civicrm/contact/view?reset=1&cid=$cid' target='_blank' >View</a> | "
            ." <a href='/civicrm/csvmatch/assign?rec=$row[id]&cid=$cid' class='choose-link' data-cid='$cid' >Choose</a> "
            .'</li>'
            ;
        }
        $html .= "</ul>\n<a href='/civicrm/csvmatch/assign?rec=$row[id]&cid=0&new=1' class='choose-link' data-cid='0' >None of these</a> ";
        return $html;
      }
      else {
        // shouldn't happen
        return 'ERROR';
      }
    }
  }
  static function getSummary($counts = null) {
    // Summarise data

    if ($counts === null) {
      $rows = db_query("
        SELECT *, COUNT(id) set_count FROM {civicrm_csv_match_cache} todo
        WHERE state != 'header'
        GROUP BY fname, lname, email");

      $counts = array('impossible' => 0, 'multiple' => 0,'chosen'=>0,'found'=>0);
      while($row = $rows->fetchAssoc()) {
        switch($row['state']) {
        case 'chosen':
          if ($row['contact_id']) {
            $counts['chosen']++;
          } else {
            $counts['impossible']++;
          }
          break;
        default:
          $counts[$row['state']]++;
        }
      }
    }

    return "<div id='csv-match-summary'><h2>Data</h2><p>Here is the data that you uploaded. "
    . ($counts['found']>0 ? "$counts[found] contact(s) were automatically matched. " : "")
    . ($counts['chosen']>0 ? "$counts[chosen] ambiguous match(es) have been resolved by you. " : "")
    . ($counts['multiple']>0 ? "$counts[multiple] contact(s) could not be automatically matched because the data
   is ambiguous, e.g. two contacts with same email or name. With these you should choose from the possibilities below. " : "")
    . ($counts['impossible']>0 ? "<p>There are $counts[impossible] contacts below for which no contact record could be found. You can <a href='/civicrm/csvmatch/create' >create contact records for them now</a> if you like. You won't be able to import contributions (activities etc.) until these contacts do exist.</p>" : "")
    . ($counts['impossible'] == 0 && $counts['multiple'] == 0 ? "<p><strong>All the rows have a contact match so this dataset looks ready for you to download now.</strong></p>" : "")
    . '</div>'
    ;
  }
  /**
   * Load the cache table data entry (not headers)
   */
  public static function loadCacheRecord($record_id) {
    return db_select("civicrm_csv_match_cache", "todo")
      ->fields('todo', array('id','fname','lname','email','state','contact_id', 'resolution'))
      ->condition('id', $record_id)
      ->condition('state', 'header', '!=')
      ->execute()
      ->fetchAssoc();
  }
  /**
   * Update cache records that match the one sent on name, email.
   */
  public static function updateCacheRecords($record) {
    $x=1;
    db_update('civicrm_csv_match_cache')
      ->fields(array(
        'state' => $record['state'],
        'contact_id' => $record['contact_id'],
        'resolution' => $record['resolution'],
      ))
      ->condition('fname', $record['fname'])
      ->condition('lname', $record['lname'])
      ->condition('state', 'header', '!=')
      ->condition('email', $record['email'])
      ->execute();
  }
}
